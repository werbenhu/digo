
//
// This file is generated by digen. Run 'digen' to regenerate.
//
// You can install this tool by running `go install github.com/werbenhu/di/digen`.
// For more details, please refer to https://github.com/werbenhu/di. 
//
package database

import "github.com/werbenhu/digo"

// init_database_mysql_url registers the singleton object with ID database.mysql.url into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("database.mysql.url")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_database_mysql_url() {
	database_mysql_url_obj := NewMysqlUrl()
	digo.RegisterSingleton("database.mysql.url", database_mysql_url_obj)
}

// init_database_mysql registers the singleton object with ID database.mysql into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("database.mysql")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_database_mysql() {
	url_obj, err := digo.Provide("database.mysql.url")
	if err != nil {
		panic(err)
	}
	url := url_obj.(string)
	database_mysql_obj := NewMysql(url)
	digo.RegisterSingleton("database.mysql", database_mysql_obj)
}

// init registers all providers in the current package into the DI object manager.
func init() {
	init_database_mysql_url()
	init_database_mysql()
}
