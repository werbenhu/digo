
//
// This file is generated by digen. Run 'digen' to regenerate.
//
// You can install this tool by running `go install github.com/werbenhu/di/digen`.
// For more details, please refer to https://github.com/werbenhu/di. 
//
package tools

import (
	"github.com/werbenhu/digo"
	"github.com/werbenhu/eventbus"
	eb "github.com/werbenhu/eventbus"
	"github.com/mochi-co/mqtt/v2"
)

// init_tools_tools2 registers the singleton object with ID tools.tools2 into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("tools.tools2")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_tools_tools2() {
	name_obj, err := digo.Provide("name")
	if err != nil {
		panic(err)
	}
	name := name_obj.(string)
	class_obj, err := digo.Provide("class")
	if err != nil {
		panic(err)
	}
	class := class_obj.(string)
	bus_obj, err := digo.Provide("tools.eventbus")
	if err != nil {
		panic(err)
	}
	bus := bus_obj.(eventbus.EventBus)
	tools_tools2_obj := NewTools2(name, class, bus)
	digo.RegisterSingleton("tools.tools2", tools_tools2_obj)
}

// init_md5 registers the singleton object with ID md5 into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("md5")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_md5() {
	name_obj, err := digo.Provide("name")
	if err != nil {
		panic(err)
	}
	name := name_obj.(string)
	class_obj, err := digo.Provide("class")
	if err != nil {
		panic(err)
	}
	class := class_obj.(string)
	tools_obj, err := digo.Provide("tools.tools")
	if err != nil {
		panic(err)
	}
	tools := tools_obj.(Tools)
	tools2_obj, err := digo.Provide("tools.tools2")
	if err != nil {
		panic(err)
	}
	tools2 := tools2_obj.(Tools)
	md5_obj := NewMd5(name, class, tools, tools2)
	digo.RegisterSingleton("md5", md5_obj)
}

// init_name registers the singleton object with ID name into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("name")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_name() {
	name_obj := NewName()
	digo.RegisterSingleton("name", name_obj)
}

// init_class registers the singleton object with ID class into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("class")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_class() {
	class_obj := NewClass()
	digo.RegisterSingleton("class", class_obj)
}

// init_tools_eventbus registers the singleton object with ID tools.eventbus into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("tools.eventbus")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_tools_eventbus() {
	tools_eventbus_obj := NewEventBus()
	digo.RegisterSingleton("tools.eventbus", tools_eventbus_obj)
}

// init_tools_mq registers the singleton object with ID tools.mq into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("tools.mq")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_tools_mq() {
	tools_mq_obj := NewMqtt()
	digo.RegisterSingleton("tools.mq", tools_mq_obj)
}

// init_tools_age registers the singleton object with ID tools.age into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("tools.age")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_tools_age() {
	tools_age_obj := NewAge()
	digo.RegisterSingleton("tools.age", tools_age_obj)
}

// init_tools_tools registers the singleton object with ID tools.tools into the DI object manager
// Now you can retrieve the singleton object by using `obj, err := di.Provide("tools.tools")`.
// The obj obtained from the above code is of type `any`.
// You will need to forcefully cast the obj to its corresponding actual object type.
func init_tools_tools() {
	name_obj, err := digo.Provide("name")
	if err != nil {
		panic(err)
	}
	name := name_obj.(string)
	class_obj, err := digo.Provide("class")
	if err != nil {
		panic(err)
	}
	class := class_obj.(string)
	age_obj, err := digo.Provide("tools.age")
	if err != nil {
		panic(err)
	}
	age := age_obj.(int)
	bus_obj, err := digo.Provide("tools.eventbus")
	if err != nil {
		panic(err)
	}
	bus := bus_obj.(*eb.EventBus)
	mq_obj, err := digo.Provide("tools.mq")
	if err != nil {
		panic(err)
	}
	mq := mq_obj.(*mqtt.Server)
	tools_tools_obj := NewTools(name, class, age, bus, mq)
	digo.RegisterSingleton("tools.tools", tools_tools_obj)
}

// Add a member object to group: strings
// Now you can retrieve the group's member objects by using `objs, err := di.Members("strings")`.
// The objs obtained from the above code are of type `[]any`.
// You will need to forcefully cast the objs to their corresponding actual object types.
func group_strings_NewName() {
	member, err := digo.RegisterMember("name")
	if err != nil {
		panic(err)
	}
	digo.RegisterSingleton("strings", member)
}

// Add a member object to group: strings
// Now you can retrieve the group's member objects by using `objs, err := di.Members("strings")`.
// The objs obtained from the above code are of type `[]any`.
// You will need to forcefully cast the objs to their corresponding actual object types.
func group_strings_NewClass() {
	member, err := digo.RegisterMember("class")
	if err != nil {
		panic(err)
	}
	digo.RegisterSingleton("strings", member)
}

// Add a member object to group: tools
// Now you can retrieve the group's member objects by using `objs, err := di.Members("tools")`.
// The objs obtained from the above code are of type `[]any`.
// You will need to forcefully cast the objs to their corresponding actual object types.
func group_tools_NewTools() {
	member, err := digo.RegisterMember("tools.tools")
	if err != nil {
		panic(err)
	}
	digo.RegisterSingleton("tools", member)
}

// init registers all providers in the current package into the DI object manager.
func init() {
	init_tools_tools2()
	init_md5()
	init_name()
	init_class()
	init_tools_eventbus()
	init_tools_mq()
	init_tools_age()
	init_tools_tools()
	group_strings_NewName()
	group_strings_NewClass()
	group_tools_NewTools()
}
